***Clase 2 Introducción al computo***

Resumen Introducción al Cómputo

“Primera computadora” creada por los griegos, calcula la posición del sol, luna y algunas constelaciones.

En 1801, Telar de Jacquar, separa el resultado de la informacion que contiene las instrucciones.

Siglo XIX, Motor analítico de Babbage, haciendo uso del avances en mecánica (engranajes) de su época logra separar instrucciones de calculo y realizar varios cálculos a la vez.

Finales siglo XIX, ENIAC (Eectronic Numerical Integrator and Computer) usaba sistema decimal. creada por Alan Turing y Alonso. Esta época exigía exactitud en los cálculos que hacían que compañías dependieran de esta(Compañías Ferroviarias por ejemplo). Turing y Alonso, Descubrieron que matemáticamente todos los algoritmos podíamos reducirlos a una secuencia de soluciones matemáticas.

En 1945, Arquitectura de Von Neumann, EDVAC (Electronic Discrete Variable Automatic Computer) usaba sistema binario. Su aporte fue el descubrimiento que dentro de los componentes electrónicos se puede usar una serie de hadward para realizar el computo y almacenar datos dentro de memoria.

En 1950, Microchip, ejemplo Apple 1

En siglo XX, Arquitectura de Feymann, aporta las bases matemáticas de computo cuántico.

- Las computadoras hacen dos cosas: hacen cálculos y recuerdan el resultado de dichos cálculos
- Por la mayoría de la historia humana, estábamos limitados por la velocidad del cerebro y la mano
- Aún con las computadoras modernas existen problemas que no podemos resolver

***Clase 3 Introducción a los lenguajes de programación***

Lenguajes:
- Tienen una sintaxis que definen la secuencia de símbolos que está bien formada
- Semántica estática: Define qué enunciados con sintaxis correcta tienen significado
- Semántica: Define el significado, en los lenguajes de programación solo hay un significado, son precisos, exactos, no tienen doble sentido

Un algoritmo es una lista finita de instrucciones que describen un cómputo, que cuando se ejecuta con ciertas entradas(inputs) ejecuta
pasos intermedios para llegar  a un resultado (output)
- John V. Guttag

¿Qué es un lenguaje de programación?
Es un lenguaje formal que, mediante una serie de instrucciones, le permite a un programador escribir un conjunto de órdenes, acciones consecutivas, datos y algoritmos para, de esa forma, crear programas que controlen el comportamiento físico y lógico de una máquina.

¿Qué tipos de lenguaje de programación existen?
El lenguaje de programación es la base para construir todas las aplicaciones digitales que se utilizan en el día a día y se clasifican en dos tipos principales: lenguaje de bajo nivel y de alto nivel.

Lenguaje de programación de bajo nivel
Son lenguajes totalmente orientados a la máquina.

Este lenguaje sirve de interfaz y crea un vínculo inseparable entre el hardware y el software.

Además, ejerce un control directo sobre el equipo y su estructura física. Para aplicarlo adecuadamente es necesario que el programador conozca sólidamente el hardware. Éste se subdivide en dos tipos:

Lenguaje máquina
Es el más primitivo de los lenguajes y es una colección de dígitos binarios o bits (0 y 1) que la computadora lee e interpreta y son los únicos idiomas que las computadoras entienden.

Ejemplo: 10110000 01100001

No entendemos muy bien lo que dice ¿verdad? Por eso, el lenguaje ensamblador nos permite entender mejor a qué se refiere éste código.

Lenguaje ensamblador
El lenguaje ensamblador es el primer intento de sustitución del lenguaje de máquina por uno más cercano al utilizado por los humanos.

Un programa escrito en éste lenguaje es almacenado como texto (tal como programas de alto nivel) y consiste en una serie de instrucciones que corresponden al flujo de órdenes ejecutables por un microprocesador.

Sin embargo, dichas máquinas no comprenden el lenguaje emsamblador, por lo que se debe convertir a lenguaje máquina mediante un programa llamado Ensamblador.

Este genera códigos compactos, rápidos y eficientes creados por el programador que tiene el control total de la máquina.

Ejemplo: MOV AL, 61h (asigna el valor hexadecimal 61 al registro “AL”)

Lenguaje de programación de alto nivel
Tienen como objetivo facilitar el trabajo del programador, ya que utilizan unas instrucciones más fáciles de entender.

Además, el lenguaje de alto nivel permite escribir códigos mediante idiomas que conocemos (español, inglés, etc.) y luego, para ser ejecutados, se traduce al lenguaje de máquina mediante traductores o compiladores.

Traductor
Traducen programas escritos en un lenguaje de programación al lenguaje máquina de la computadora y a medida que va siendo traducida, se ejecuta.

Compilador
Permite traducir todo un programa de una sola vez, haciendo una ejecución más rápida y puede almacenarse para usarse luego sin volver a hacer la traducción.

***Clase 4 Preparación de la computadora***

Antes de comenzar este curso asegúrate de preparar tu entorno de trabajo para poder hacer todos los ejercicios. A continuación te compartiré los pasos que debes seguir para configurar tu computadora.

Si estás usando Windows asegúrate de instalar lo siguiente en tu computadora:

Python 3.7 (o superior)
1. Para obtener el instalador dirígete a https://www.python.org/downloads/
1.png
2. Descarga el instalador y ejecútalo en tu computadora.
2.png
3. Habilita la casilla de verificación en Install launcher for all users y Add Python 3.8 to PATH. A continuación presiona en Install Now. Windows te solicitará permisos para instalar Python en tu computadora.
3.png
4. Al finalizar la instalación se abrirá una ventana como la siguiente, en ella deberás presionar en la opción Disable path length limit. Windows te solicitará permisos para realizar este cambio.
4.png
Visual Studio Code
En el curso el profesor utiliza Visual Studio Code, un editor de textos que tiene integradas varias herramientas que te ayudarán a desarrollar tus ejercicios con facilidad. Para obtenerlo en tu computadora, dirígete a: https://code.visualstudio.com/

4.png
1. Realiza una instalación normal de Visual Studio code.
6.png
Una vez instalado se ejecutará Visual Studio Code.

2. En Visual Studio Code dirígete al panel de Extensiones, se encuentra en el panel lateral izquierdo. Ahí deberás buscar la extensión llamada Python.
6.png
3. Selecciona la extensión creada por Microsoft, la identificarás por ser similar a la que se muestra en la imágen. Una vez seleccionada, instálala
7.png
4. Una vez instalada, reinicia Visual Studio Code.
Listo con esto podrás correr los programas que escribas en python en la terminal de Visual Studio Code.

Cuando quieras correr tu programa en la terminal de Visual Studio Code, puedes introducir la dirección como lo muestra el profesor en el curso o presionar en el botón “Run Python File in Terminal”

***Clase 4 Elementos básicos de python***

- Bajo nivel vs alto nivel
    - alto nivel: significa que está diseñado para los humanos, es decir, que se acerca mucho más al lenguaje natural a la forma en que nos comunicamos
    - bajo nivel: está diseñado para que lo entienda un máquina se parece más a unos y ceros
- General vs dominio específico
    - General: significa que tiene todos los primitivos que nos otorga turing para poder implementar o computar cualquier algoritmo
    - Dominio específico:  son lenguajes especialidados a aplicaciones específicas
- Interpretado vs compilado
    - Interpretado: es decir la máquina lo va leyendo y cada instrucción la va convirtiendo a tiempo real en un lenguaje que pueda entender la máquina
    - Compilado: 

- Objetos:
    Tipos:
        - entero, flotantes, booleanos, etc
    - Escalares: 
        que se pueden subdividir
    -No escalares:
        que no se pueden subdividir

***Clase 6 asignación de variables***

Las variables son simplemente nombres asociados a espacios en memoria, y los vinculamos a través del operador de asignación
Se lee de derecha a izquierda. Al contrario que la lectura normal.

por ejemplo en explicación es así:
a = 2
x = 4
z = (a*x/2)
lo que le decimos ahí es que a tiene el valor de 2, x tiene el valor de 4, y z tiene el resultado de la operación entre a y x y divido 2
- a las variables siempre se les da un nombre exacto de lo que significa, ejemplo:

base = 2
altura = 4
area = (base*altura)/2

- si tenemos una variable y esa variable apunta a un lugar de memoria y si nosotros reasignamos esa variable, simplemente pasamos a apuntar a otro lugar
las variables en python:
    - Pueden estár compuestas de mayúsculas, minúsculas, números (sin comenzar con uno), y el símbolo _
    - No pueden llamarse como palabras reservadas de python